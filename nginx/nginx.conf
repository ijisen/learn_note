# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/

#配置用户或者组，默认为nobody nobody。
# user  nobody;
user nginx;

# ==工作进程数，一般设置为cpu核心数 auto | number， 默认1
worker_processes auto;

# 错误日志存放地址
# error_log  logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;
# error_log /var/log/nginx/error.log;

# pid        logs/nginx.pid;
# 指定nginx进程运行文件存放地址
pid /run/nginx.pid;

# events块
# 配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。
events {
    # ==最大连接数，一般设置为cpu*2048，默认为512
    worker_connections  1024;
    # 设置网路连接序列化，防止惊群现象发生，默认为on
    accept_mutex on;
    # 设置一个进程是否同时接受多个网络连接，默认为off
    multi_accept on;
}

# http块
# 可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。
http {
    # ...http全局块

    # 文件扩展名与文件类型映射表
    include       mime.types;

    # 默认文件类型，默认为text/plain
    default_type  application/octet-stream;

    # 日志格式
    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    # $remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；
    # $remote_user：用来记录客户端用户名称；
    # $request： 用来记录请求的url与http协议；
    # $status： 用来记录请求状态；成功是200；
    # $body_bytes_s ent ：记录发送给客户端文件主体内容大小；
    # $http_referer ：用来记录从那个页面链接访问过来的；
    # $http_user_agent ：记录客户端浏览器的相关信息；
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # #combined为日志格式的默认值
    # access_log  logs/access.log  main;

    # 允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    sendfile  on;
    # 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
    sendfile_max_chunk 100k;

    # tcp_nopush on
    tcp_nodelay on;

    # 客户端链接超时时间，默认为75s; 可以在http块，server块，location块。
    keepalive_timeout  65;

    types_hash_max_size 4096;

    # 服务支持的拓展文件，一般不需要配置，默认配置文件已包含全部
    # include             /etc/nginx/mime.types;

    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # gzip  on;

    # 当配置多个server节点时，默认server names的缓存区大小就不够了，需要手动设置大一点
    # server_names_hash_bucket_size 512;

    upstream mysvr {
        server 127.0.0.1:7878;
        server 192.168.10.121:3333 backup;  #热备
    }

	  # server表示虚拟主机可以理解为一个站点，可以配置多个server节点搭建多个站点
    # 每一个请求进来确定使用哪个server由server_name确定
    server {
        #单连接请求上限次数。
        keepalive_requests 120;

        # 站点监听端口
        listen       80;
        listen       [::]:80;

        # 站点访问域名
        # server_name  _;
        # server_name  127.0.0.1;
        server_name  localhost;

        # 编码格式，避免url参数乱码
        # charset koi8-r;
        charset utf-8;

        # access_log  logs/host.access.log  main;

        # 服务存放目录
        # root         web;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
            # 站点根目录，可以是相对路径，也可以使绝对路径
            # root D:/web/html
            # root   web;
            # 默认主页
            index  index.html index.htm;
            # 请求转向mysvr 定义的服务器列表
            # proxy_pass http://202.173.9.83:12306/;
            proxy_pass  http://mysvr;
            deny 127.0.0.1;  #拒绝的ip
            allow 172.18.5.54; #允许的ip
        }

        location ~* ^/do$ {
            return  http://47.109.86.85:8181/;
        }

        location ~* ^/java$ {
            # return == redirect
            return  http://47.109.86.85:8282/;
        }
		    location /12306/ {
            proxy_pass http://202.173.9.83:12306/;
        }

		    location /api/ {
            proxy_pass http://202.173.9.83:8181/;
        }

        location /getAllTld {
            proxy_pass http://202.173.9.83:12306/;
        }

        # error_page  404              /404.html;
        error_page 404 /404.html;
        location = /404.html {
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        # location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        # }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        # location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        # location ~ /\.ht {
        #    deny  all;
        #}
    }
    # 域名解析必须绑定到80端口上
    server {
        listen       80;
        server_name  aa.bjchjs.com;
        location = / {
            proxy_pass  http://47.109.86.85:8181/;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
    server {
        listen       80;
        server_name  b.bjchjs.com;

        location / {
            proxy_pass  http://www.bjchjs.com/;
            # proxy_redirect off;
            #proxy_set_header Host $host;
            #proxy_set_header X-Real-IP $remote_addr;
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        #access_log logs/p_access.log;
    }
    server {
        listen       8888;
        server_name  localhost;
        charset utf-8;
        location / {
            root   html;
            index  index.html index.htm;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # Settings for a TLS enabled server.
    #
    #server {
    #    listen       443 ssl http2;
	  #    listen       [::]:443 ssl http2;
	  #    server_name  _;
    #    server_name  localhost;

	  #    root         /usr/share/nginx/html;

    #    ssl_certificate      cert.pem;
	  #    ssl_certificate "/etc/pki/nginx/server.crt";
    #    ssl_certificate_key  cert.key;
	  #	   ssl_certificate_key "/etc/pki/nginx/private/server.key";
	  #    ssl_session_cache shared:SSL:1m;
    #    ssl_session_timeout  5m;
	  #    ssl_session_timeout  10m;
	  #    ssl_ciphers HIGH:!aNULL:!MD5;
	  #    ssl_prefer_server_ciphers on;

	  # Load configuration files for the default server block.
	  #    include /etc/nginx/default.d/*.conf;


    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #
    #    error_page 404 /404.html;
    #    location = /40x.html {
    #    }
    #
    #    error_page 500 502 503 504 /50x.html;
    #    location = /50x.html {
    #    }
    #}
}





